Git 常用命令总结
时间 2014-05-21 12:32:06  图灵社区 相似文章 (2)
原文  http://www.ituring.com.cn/article/110961
学会这些命令，你就可以熟练的使用Git工具了，什么？想精通，那是不可能的。

基本上，Git就是以下面的命令顺序学习的。文中笔记是从廖雪峰老师的 Git教程 中总结出来的，方面查阅命令。详细原理请看 Git教程 。

1、基础
#1.1 使用前的设置
#如果你还没有安装git的话，请查看 Getting Started page上的安装指南。 
#第一次使用git，我们假定你正在一个文件夹内工作，该文件夹是你项目的主文件夹。
#你需要做的第一件事情是用下面这条命令来初始化文件夹供Git使用。
#切换到你的目录, present working directory: PWD
pwd
cd /d d:/mygit/
#初始化一个git仓库
git init
#To make a new directory that is a Git repository we just specify a directory.
git init newrepo

#设置你的仓库用户名（用于标识提交者）
git config --global user.name "Your Name" 
#设置你的仓库邮箱（用于标识提交者）
git config --global user.email "email@example.com" 

#1.2 告诉git你要处理的文件
#现在你需要告诉git，需要考虑哪些文件。如果你有N个文件，你可以使用
#git add <file1> <file2> … <fileN>
#来添加他们。或是你想要把目录下的文件全部添加，你可以使用
#(句号是命令的一部分，表示当前目录。)
#To add everything in your directory try git add ..
git add . 
#添加所有更改的文件
git add --all 
#当然可以指定添加filename1
git add filename1 

#1.3 提交改动Committing a Version
#下一步，我们需要提交改动。任何时候，你想要提交一个文件或多个文件的改动，运行
#git commit <file1> <file2> … <fileN> -m “This is your commit message”
#或者，提交全部有改动的文件：
#git commit -a -m “This is your commit message for all changed files”
#确保你的提交信息能够包含足够的描述信息，让你可以搞清楚你想要回退到哪个版本。
#添加更改的信息，必须要有，不然报错，不建议不加。
#Now that we've added these files, 
#we want them to actually be stored in the Git repository. 
#We do this by committing them to the repository.
git commit -m "Adding files"
#If you leave off the -m you will be put into an editor to write the message yourself.
git commit -m "commit message" 

#Editing Files
#When you've made changes to some files, 
#you can run git status to see what will happen on commit. 
#You'll notice a list of modified files, and a message:
#no changes added to commit (use "git add" and/or "git commit -a")
#So running git commit will do nothing unless you explicitly add files
#to the commit with git add. 
#If you're looking for the commit command to 
#automatically commit local modifications we use the -a flag.
git commit -a -m "Changed some files"
#Or if you'd like to have only certain files, 
#but still not run git add we pass specific files.
git commit -m "change some files" file1 file2
#Do note that -a will not cause new files to be committed, only modified.

#1.4查看历史
#现在你需要一个查看旧版本的方法。为了查看提交信息和该次提交的hash值（代表版本的一串数字）可以使用如下命令，使其以每行一个版本的方式输出，单行显示提交日志
git log --pretty=oneline
#它的输出看起来是下面这样的，每次提交的hash值和它的提交信息一起显示
#dbe28a0a1eba45d823d309cc3659069fc16297e3 4th version I wanted to commit
#13bbf385e6d1f94c7f11a4cdfa2a7688dfdd84f8 3rd
#a1696f671fb90dc8ea34645a6f851d0ab0152fc2 2nd versio
#179e59467039c7a7b81f676297415c8e018542a0 first version
#注意，你同样可以使用git log查看最近的提交日志信息
git log
#来输出一个更冗长的信息，每个版本信息占用多行，而且你可以使用
git log –pretty=oneline -- <filename>
#来查看某个具体文件的改动。（注意第二个–后面的空格！）

git log --pretty=oneline 

#1.5 恢复旧版本
#恢复之前版本的文件，你只需要使用hash值的前几个数字（要保证足够的区分度）：
#git checkout <hash> -- <filename>
#比如
git checkout 179e59467039 -- myfile
#会把我的名为myfile的文件的内容回退到179e59467039c7a7b81f676297415c8e018542a0这个状态
#（这里是指本文件的第一次提交版本）

#1.6 查看改动
#通常你不会不先查看一下文件变化就回退到旧的版本！
#查看文件当前版本和历史版本的区别，你需要指明历史版本的hash值：
git diff --
#你同样可以比较两个历史版本的差别：
git diff --
#查看filename1到底修改了哪些内容
git diff filename1

#1.7 不清楚有哪些文件被改动了
#有时候，你不清楚有哪些文件被改动了。
#你可以使用如下命令找到它们,查看git当前状态
git status
#这会生成一份文件列表以及他们的状态。
#比如，一个还没有被’git add’ 的文件会被显示为`untracked`；
#如果你想要追踪这个文件，就需要添加它。 
#在我的两分钟教程中，我把这个命令当做可选项的原因是，这个命令可能会有点笨拙。
#因为它可能会列出很多你并不关心的文件的状态。
#举例来说，如果你使用Python语言编程，它会列出Python生成的编译文件.pyc。
#你肯定想解决这一问题。

#在Git中忽略文件
#你是否对出现在你Git仓库中的已编译文件（比如.pyc）感到厌烦？
#亦或是你已经对把它们加入Git中这件事感到忍无可忍了？
#眼下就有一个可以让Git忽略特定文件或是目录的方法。只需要简单的创建一个.gitignore文件，然后列出你不想让Git跟踪的文件和目录即可。你可以使用感叹号(!)来指出例外的情况。
*.pyc
*.exe
my_db_config/
!main.pyc
#为了解决这个问题，你需要在目录下创建一个叫`.gitignore` 的文件。
#比如你在使用Python 2.x的项目，你会希望在这个文件中（至少）包含：
#*.pyc
#注意，.gitignore` 可以理解*通配符。
#如果你想要隐藏一个完整的目录，你要在文件夹名后面加一个斜杠。
#例如你使用Python 3.x编程，所有的便以文件都会进入一个叫__pycache__ 的文件夹，
#所以你需要在.gitignore中添加
#__pycache__/
#查看git当前状态
git status

#1.8 Publishing Your Repository
#To put your repository on a server we'll start by making a "bare" repository, 
#and upload it to a server.
cd /tmp
git clone --bare ~/your/repo/path project.git
scp -r project.git ssh://example.com/~/www/
#Now if we have a couple of commits and want to push it up to that location:
git push ssh://example.com/~/www/project.git
#If you dislike typing the URI each time we can take advantage that 
#a cloned project remembers where it came from.
cd ..
git clone ssh://example.com/~/www/project.git project
Now git push will push to the URI it was cloned from. 
#You can do this manually by editing .git/config in your repository.


#Get Upstream Changes
#If you're already setup for push as above:
git pull
#Will bring changes down and merge them in. 
#To pull from a non-default location just specify the URI.
git pull http://git.example.com/project.git


git reset --hard commitID 利用 git log 得到的commitID返回版本
git reset --hard HEAD^ 回到上一个版本
git reflog 查看命令的历史，可以找到 git log 看不到的commitID，因为 git log 只显示当前的提交日志，如果你提交了一次，退回版本后又后悔了，就能查看上次提交的commitID
git checkout -- filename1 利用版本库中的版本替换工作区中的文件。功能有2：
#撤销文件修改，分两种情况：
#撤销工作区中的修改（没有使用 git add 命令添加到暂存区）
#撤销暂存区中的修改（添加到了暂存区又做了修改）
#找回删除的文件
#工作区中文件误删了，可以通过此命令从版本库中找回
git reset HEAD filename1 撤销add，回到工作区

#Remove
#If you want to remove a file from the repository, 
#removing it from future commits we use rm.
git rm file
#删除文件
git rm filename1 
#删除目录
rm -rf filenem
#rename use mv
mv feature132-foo.fla flash/foo.fla

#将本地库关联到github远程库上
git remote add origin https://github.com/pengloo53/learngit.git 

#第一次推送的时候要加上 -u 参数，可以将本地库的master分支与远程库的master分支关联起来；
#下次提交就不需要加 -u 了。
git push -u origin master 
git clone https://github.com/pengloo53/learngit.git 克隆远程库到本地



2、分支管理
#Branching and Merging
Branches are done locally and are fast. 
#To create a new branch we use the branch command.
git branch test
#the branch command does not move us into the branch, 
#just create one. So we use the checkout command to change branches.
git checkout test

#创建dev分支并切换到dev。
#相当于 git branch dev 、 git checkout dev 两条命令。
git checkout -b dev 
#查看当前分支
git branch 

#The first branch, or main branch, is called "master."
git checkout master
#While in your branch you can commit changes that 
#will not be reflected in the master branch. 
#When you're done, or want to push changes to master, 
#switch back to master and use merge.
git checkout master
git merge test
#And if you're done with the branch you can delete 
#with the branch command and pass the -d flag.
git branch -d test

#Traveling Through Time
#You can quickly very previous states of the repository 
#using the checkout command again.
git checkout HASH
#Uncommited changes will travel with you. 
#Return to the preset with git checkout master as with normal branches. 
#If you commit while in the past a branch is automatically created 
#and your changes will have to be merged forward.

#Sweeping Changes Under the Rug for Later
#When moving between branches your local changes move with you. 
#Sometimes you want to switch branches but not commit or take those changes with you. 
#The Git command stash lets you put changes into a safe store.
git stash
#You can retreive by passing an arguement of apply or pop.
git stash apply
#The difference between apply and pop is simple. 
#apply will take a stash state and apply it, 
#but preserve that state in the stash. 
#pop will take the stash state, apply it, 
#and remove it from the stash. git stash clear empties the contents of the stash.




git merge dev 合并指定分支到当前分支，如，你现在master分支，那么执行命令就将dev分支合并到了master分支上。
git branch -d dev 删除dev分支
git log --graph --pretty=oneline --abbrev-commit 查看分支合并图
git merge --no-ff -m "merge with no-ff" dev 禁用「Fast forward」，也就是保留分支的相关信息。
git stash 将工作区现场储藏起来，等以后恢复后继续工作。通常用于处理更为着急的任务时，例如：bug。
git stash list 查看保存的工作现场
git stash apply 恢复工作现场
git stash drop 删除stash内容
git stash pop 恢复的同时直接删除stash内容
git stash apply stash@{0} 恢复指定的工作现场，当你保存了不只一份工作现场时。
git branch -D feature-vulcan 强行删除分支。用于不需要合并，就地删除的情况。
git remote 查看远程库的信息，一般返回origin。
git remote -v 查看远程库的详细信息。
git push origin master 将本地master分支推送到远程master分支。
master分支为主分支，因此要时刻与远程同步；
dev分支为开发分支，团队成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，没有必要推送到远程；
feature新功能分支是否推送到远程，取决于你是否和其他人合作在上面开发。
git clone https://github.com/pengloo53/learngit.git 将远程库克隆到本地，默认只能看到master分支。
git checkout -b dev origin/dev 创建远程dev分支到本地
git pull 将远程分支的最新内容抓取下来。
git branch --set-upstream dev origin/dev 将本地dev分支与远程dev分支之间建立链接。
多人协作工作模式

首先，可以试图用 git push origin branch-name 推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并（如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream branch-name origin/branch-name ）;
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用 git push origin branch-name 推送就能成功！

3、标签管理
git tag v1.0 给当前分支打上标签
git tag 查看所有的标签，按时间顺序列出。
git log --pretty=oneline --abbrev-commit 缩略commitID并单行显示提交信息
git tag v0.9 commitID 通过上一条命令查看commitID，然后打上标签。用于忘记打标签的情况，因为标签其实就是只想某个commitID的指针，默认情况下，标签打在最新的提交上。
git show v0.9 查看标签信息。
git tag -a v0.1 -m "version 0.1 released" commitID 创建带有说明的标签， -a 指定标签名， -m 指定说明文字。
git tag -d v0.1 删除标签v0.1
git push origin v1.0 推送标签1.0到远程
git push origin --tags 推送所有的标签到远程
git push origin :refs/tags/v0.9 删除远程标签，但是前提是要先在本地删除对应标签。

4、自定义Git
git config --global color.ui true 让Git显示颜色
.gitignore 在这个文件里编辑你要忽略的文件，并提交到Git中，就可以忽略特殊文件的检查。如将 *.db 写入 .gitignore 文件中，将忽略所有db文件。可以参考 github收集的所有.gitignore
git config --global alias.st status 将status的别名设置成st，那么 git st = git status 。
git config --global alias.unstage 'reset HEAD' 那么 git reset HEAD filename = git unstage filename
git config --global alias.last 'log -1' 敲 git last 就显示最后一次提交了。

5、搭建Git服务器
sudo apt-get install git 安装Git；
sudo adduser git 添加Git用户；
sudo git init --bare sample.git 初始化git仓库；
sudo chown -R git:git sample.git 修改仓库的所属用户为git；
将git用户的信息 git:x:1001:1001:,,,:/home/git:/bin/bash 改成 git:x:1001:1001:,,,:/home/git:/bin/git-shell ，为了禁用shell登录。
git clone git@server:/director/sample.git 克隆Git服务器上的仓库
PS. 想方便管理公钥，用 Gitosis ；想控制权限，用 Gitolite 。
